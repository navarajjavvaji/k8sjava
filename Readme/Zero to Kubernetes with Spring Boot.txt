Zero to Kubernetes with Spring Boot
Ref: https://academy.learnk8s.io/02k8s-java-intro#main-menu

Git Hub Reference: https://github.com/navarajjavvaji/k8sjava.git 
Docker Reference: navarajjavvaji/navaraj_k8sjava

Prerequisites: 

1) Install Docker Desktop  ( Dont enable kubernates by default in docker desktop)
2) Install chocolatey ( https://chocolatey.org/install)
3) Install minikube (choco install minikube)
4) Install git (choco install git -y)
5) Install Maven (choco install maven --version=3.6.2)
6) Install Nodejs,grep,curl (choco install nodejs -y,choco install grep -y,choco install curl -y) -This is to build the node js apps


Build the Java App:

refer: https://academy.learnk8s.io/02k8s-java-intro

1) https://start.spring.io/
2) Select the Project as Maven,language as Java,Sringboot 2.3.1
3) Add the dependencies as Spring Web,Spring Boot Actuator and generate the Jar file (you can add your package name :k8sjava)
4) Now in the k8sjava.java file add the rest controller 

			package com.navaraj.k8sjava;

			import org.springframework.boot.SpringApplication;
			import org.springframework.boot.autoconfigure.SpringBootApplication;
			import org.springframework.web.bind.annotation.RequestMapping;
			import org.springframework.web.bind.annotation.RestController;

			@SpringBootApplication
			@RestController
			public class K8sjavaApplication {

				public static void main(String[] args) {
					SpringApplication.run(K8sjavaApplication.class, args);
				}
				@RequestMapping("/")
				public String index() {
					return "Hello to you from springBootExample";
				}
			}
			
5) Save the file and commit (Refer Git Commands)
6) Open Power shell run the below commands
7) Running the application Via Maven
	mvn clean compile
	tree
	mvn clean install
	mvn clean install spring-boot:run
	
	in browser http://localhost:8080/
	http://localhost:8080/actuator
	you can see application up and running
8) Running via Java Commands
	java $JAVA_OPTS -jar .\target\K8sjava-0.0.1-SNAPSHOT.jar
	in browser http://localhost:8080/
		http://localhost:8080/actuator
		you can see application up and running
    You can see in the target the jar will be generated
9) Build the Docker Image file (Run the Application Via Docker)
   Create the Dockerfile with the below content 
   
			FROM adoptopenjdk/openjdk11:jdk-11.0.2.9-slim
			ENV PORT 8080
			COPY target/*.jar /opt/app.jar
			WORKDIR /opt
			ENTRYPOINT exec java $JAVA_OPTS -jar app.jar    
10) Now come to powershell the build the image and run the image

		 docker build -t k8sjava:1.0.0 .
		 docker run -p 8080:8080 -t k8sjava:1.0.0
		 
		 in browser http://localhost:8080/ ,http://localhost:8080/actuator
		 you can see application up and running

11) To see the docker images ,container where it is running 
    images
	
		docker images
		docker -ps -a  (Containers)
		docker -rmi -f  (to remove)
		docker rm (remove) 
		docker stop
		docker run 
	
12) Push the docker image to docker hub
    
		First we need to tag the docker (Make sure you have tagged your image in this format: {{username}}/{{imagename}}:{{version}} )
		docker tag navaraj_k8sjava:1.0.0 navarajjavvaji/navaraj_k8sjava:1.0.0
		docker push navarajjavvaji/navaraj_k8sjava:1.0.0

13) Create deployment.yaml file

		Create a folder called as kube in the project repostiory
		now create one file called as deployment.yaml
		enter the below data (you can read the document why we kept this) 
		
							apiVersion: apps/v1
							kind: Deployment
							metadata:
							  name: k8s
							spec:
							  replicas: 1
							  selector:
								matchLabels:
								  app: k8s
							  template:
								metadata:
								  labels:
									app: k8s
								spec:
								  containers:
									- name: app
									  image: navarajjavvaji/navaraj_k8sjava:1.0.0
									  ports:
										- containerPort: 8080
									  imagePullPolicy: Always
							---
							apiVersion: v1
							kind: Service
							metadata:
							  name: k8s
							spec:
							  selector:
								app: k8s
							  ports:
								- port: 80
								  targetPort: 8080
							  type: LoadBalancer
							  
14) deploy the kubernetes in minikube
		minikube start
		kubectl cluster-info  (	To further debug and diagnose cluster problems, use 'kubectl cluster-info dump')
		kubectl explain deployment  (not needed) , kubectl explain deployment.spec.replicas
15) Deployment in kubernates
    Go to the project folder and run the below command
    
	kubectl apply -f .\kube\deployment.yaml
    kubectl cluster-info
    kubectl get pods
	kubectl get pods -owide (Some extra commands    kubectl explain service.spec.type,kubectl get pods --watch,kubectl svc) 
	
16) Run the minikube service to deploy the application

	C:\Users\Navaraj\gitrepos\k8sjava> minikube service  (* You must specify a service name)

	PS C:\Users\Navaraj\gitrepos\k8sjava> minikube service k8s 

	  NAMESPACE | NAME | TARGET PORT |            URL             |
	|-----------|------|-------------|----------------------------|
	| default   | k8s  |          80 | http://172.17.50.206:31693 |
	|-----------|------|-------------|----------------------------|
	* Opening service default/k8s in default browser...
	Open the URL in that browser
	
17) Stop the service and delete the deployment 

		  kubectl delete -f .\kube\deployment.yaml
		  kubectl get pods
		  minikube stop
		  minikube status
		  
18) Enable to local kubernates from docker desktop then run

		kubectl apply -f .\kube\deployment.yaml
		kubectl get pods -owide
		
		NAME                   READY   STATUS    RESTARTS   AGE   IP         NODE             NOMINATED NODE   READINESS GATES
		k8s-56dffcfdcc-8txx4   1/1     Running   0          16s   10.1.0.8   docker-desktop   <none>           <none>
		
		kubectl get svc
		
		NAME         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
		k8s          LoadBalancer   10.102.180.87   localhost     80:30927/TCP   107s
		kubernetes   ClusterIP      10.96.0.1       <none>        443/TCP        122m
		
		Run localhost:80 in the browser
		http://localhost/
		http://localhost/actuator
		http://localhost/actuator/health
		
		It will work fine
		
Working with Helm charts:
==========================
19) Installing Helm

    https://chocolatey.org/search?q=helm
	choco install kubernetes-helm
	helm version
version.BuildInfo{Version:"v3.2.4", GitCommit:"0ad800ef43d3b826f31a5ad8dfbb4fe05d143688", GitTreeState:"clean", GoVersion:"go1.13.12"}

20) https://helm.sh/docs/intro/quickstart/
    helm repo add stable https://kubernetes-charts.storage.googleapis.com/
	
21) References: https://docs.bitnami.com/tutorials/create-your-first-helm-chart/
    How to create helm chart? 
	
	helm create <Chart-name> eg: helm create kube-charts => This create a chart folder call kubep-charts
	
	PS C:\Users\Navaraj\gitrepos\k8sjava> helm create k8sjava-charts
    Creating k8sjava-charts
	
22) Changes in the files to add our docker image and some other configurations

Navigate to template/deployment.yaml file and make below changes
containerport :8080

Navigate to values.yaml file and make below changes Update image:  

image:
  repository: navarajjavvaji/navaraj_k8sjava
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 1.0.0

Update the service as follows service:  

service:
  type: NodePort
  port: 8080
  targetPort: 8080
  portname: http-k8s
  
Below are the service types present and what we need to give to make the application run
========================================================
CluserIP  -Managed (like offices with in cluser)
LoadBalancer  -Managed (DNS entry etc ,certificates)
NodePort  - local (minikube)
=========================================================
Update ingress to add route ingress:

ingress:
    #virtualServiceName: k8s-vs
    #destinationRuleName: k8s-ds
    http:
      - match:
        - uri:
            prefix: /
			
We are giving prefix as / so that it will take everything after the URL


Save all the charts and Dry run the charts 

23) with below helm command helm template dryrun --debug ./k8sjava-charts
Install the charts with the below helm command 

helm install <Some Name> <Charts folder> 

Example: helm install k8sjava-qa ./k8sjava-charts

PS C:\Users\Navaraj\gitrepos\k8sjava> helm install k8sjava-qa ./k8sjava-charts
NAME: k8sjava-qa
LAST DEPLOYED: Sun Jul 12 18:38:10 2020
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get the application URL by running these commands:
  export NODE_PORT=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].nodePort}" services k8sjava-qa-k8sjava-charts)
  export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
  
Since Windows wont run export replace with set command

PS C:\Users\Navaraj\gitrepos\k8sjava> set NODE_PORT=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].nodePort}" services k8sjava-qa-k8sjava-charts)
PS C:\Users\Navaraj\gitrepos\k8sjava> set NODE_IP=$(kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[0].address}")
PS C:\Users\Navaraj\gitrepos\k8sjava> echo http://$NODE_IP:$NODE_PORT  (this is not working in windows you can ignore it)


24) below are the commnads ro see if it is installed properly

PS C:\Users\Navaraj\gitrepos\k8sjava> helm list
NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION
k8sjava-qa      default         1               2020-07-12 18:38:10.0258662 +0530 IST   deployed        k8sjava-charts-0.1.0    1.16.0

PS C:\Users\Navaraj\gitrepos\k8sjava> kubectl get pods
NAME                                        READY   STATUS    RESTARTS   AGE
k8sjava-qa-k8sjava-charts-dbc78b87f-87wp6   1/1     Running   0          6m33s

PS C:\Users\Navaraj\gitrepos\k8sjava> kubectl get svc -o wide
NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE     SELECTOR
k8sjava-qa-k8sjava-charts   NodePort    10.107.133.105   <none>        8080:31798/TCP   6m50s   app.kubernetes.io/instance=k8sjava-qa,app.kubernetes.io/name=k8sjava-charts
kubernetes                  ClusterIP   10.96.0.1        <none>        443/TCP          3d21h   <none>

PS C:\Users\Navaraj\gitrepos\k8sjava> minikube service list
|-------------|---------------------------|--------------|----------------------------|
|  NAMESPACE  |           NAME            | TARGET PORT  |            URL             |
|-------------|---------------------------|--------------|----------------------------|
| default     | k8sjava-qa-k8sjava-charts | http/8080    | http://192.168.26.21:31798 |
| default     | kubernetes                | No node port |
| kube-system | kube-dns                  | No node port |
|-------------|---------------------------|--------------|----------------------------|

Verification 

wget http://192.168.26.21:31798
you will get 200 ok

in browser check 

http://192.168.26.21:31798/
http://192.168.26.21:31798/actuator
http://192.168.26.21:31798/actuator/health
All should work fine



25) Some useful commands:

kubectl logs k8sjava-qa-k8sjava-charts-dbc78b87f-87wp6  (Pod name)(to see the logs)
kubectl delete deployment charts-1594488101 (delete the deployment)
kubectl get deployments (list all deployments)
kubectl describe deployments
kubectl describe deployments k8sjava-qa-k8sjava-charts
(https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)

26) to delete 

helm delete <chart name> => delete charts 
Minikube delete service <service name> -> delete service
kubectl delete deployment charts-1594488101
kubectl -f delete .\kube\deployment.yaml
once we delete the helm it will automatically delete everything


